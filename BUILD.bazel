load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load(
    "@rules_xcodeproj//xcodeproj:defs.bzl",
    "xcodeproj",
)
load(
    "//common/bazel_tools:xcodeproj_targets.bzl",
    "ASSOCIATED_EXTRA_FILES",
    "BAZEL_ENV",
    "CONFIG",
    "DEFAULT_XCODE_CONFIGURATION",
    "EXTRA_FILES",
    "FAIL_FOR_INVALID_EXTRA_FILES_TARGETS",
    "PRE_BUILD",
    "PROJECT_OPTIONS",
    "SCHEME_AUTOGENERATION_MODE",
    "UNFOCUSED_TARGETS",
    "XCODEPROJ_TARGETS",
    "XCODE_CONFIGURATIONS",
    "get_xcode_schemes",
)

string_flag(
    name = "flag_to_transition_on",
    build_setting_default = "",
    visibility = ["//visibility:public"],
)

alias(
    name = "xcode",
    actual = "//:xcodeproj-bazel-x86_64",
    visibility = [
        # "//iOSApp/Test:__subpackages__",
        # "@rules_xcodeproj//xcodeproj:generated",
        "//visibility:public",
    ],
)

[
    xcodeproj(
        name = "xcodeproj-{}-{}".format(build_mode, simulator_cpu),
        associated_extra_files = ASSOCIATED_EXTRA_FILES,
        bazel_env = BAZEL_ENV,
        build_mode = build_mode,
        config = CONFIG,
        default_xcode_configuration = DEFAULT_XCODE_CONFIGURATION,
        extra_files = EXTRA_FILES,
        fail_for_invalid_extra_files_targets = FAIL_FOR_INVALID_EXTRA_FILES_TARGETS,
        # 设定模拟器架构，一般设定 x86_64，如果不需要模拟器则不设定
        ios_simulator_cpus = simulator_cpu,
        pre_build = PRE_BUILD,
        project_name = "Haap",
        project_options = PROJECT_OPTIONS,
        scheme_autogeneration_mode = SCHEME_AUTOGENERATION_MODE,
        schemes = get_xcode_schemes(),
        tags = ["manual"],
        top_level_targets = XCODEPROJ_TARGETS,
        tvos_simulator_cpus = simulator_cpu,
        unfocused_targets = UNFOCUSED_TARGETS,
        watchos_simulator_cpus = simulator_cpu.removeprefix("sim_"),
        xcode_configurations = XCODE_CONFIGURATIONS,
    )
    for build_mode in [
        "bazel",
        "xcode",
    ]
    for simulator_cpu in [
        "sim_arm64",
        "x86_64",
    ]
]

# tools

genrule(
    name = "lint",
    srcs = [],
    outs = ["lint.sh"],
    cmd = """
echo "set -e" > "$@"
echo "./$(location @buildifier_prebuilt//:buildifier) -lint fix -mode fix -r \\$$BUILD_WORKSPACE_DIRECTORY" >> "$@"
echo "./$(location @SwiftLint//:swiftlint) --fix \\$$BUILD_WORKSPACE_DIRECTORY" >> "$@"
""",
    executable = True,
    tools = [
        "@SwiftLint//:swiftlint",
        "@buildifier_prebuilt//:buildifier",
    ],
)
